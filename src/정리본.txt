p.34
    -변수 : 하나의 값을 저장할 수 있는 메모리 번저에 붙어진 이름.
    -변수의 선언
        1. 타입
            -기본 자료형 8 개 가 존재
                -사용하는 이유 : 목적에 맞지 않는 타입 사용으로 인한 버그를 사전에 제거하기 위해.
            -정수형 타입
                byte, short, int, long
            -실수형 타입
                float, double
            -불리언 타입
                boolean
            -문자 타입 vs 문자열
                char
        2. 이름
            -첫글자가 소문자인 카멜표기법 사용 , 숫자시작, 공백, 띄어쓰기 안됌!!!!,  일부 특수문자만 가능
            -사용하는 이유 : 메모리 주소값 대신 메모리 위치를 식별하기 위해 문자로 표현
                -(컴퓨터는 저장시 메모리 주소값[16진수] = 사람이 알기 어렵다.)
        3. 대입
            =
        4. 초기값

    -변수 선언 종류
        1. 타입 변수명                   [아직 메모리 할당 x  -> 호출 불가능]
        2. 타입 변수명 = 초기값           [*메모리 할당 o]
========================================================================================================================
진수
    2진수 : 0 또는 1 <----> 이진코드 <----> 기계어
    8진수 : 0 1 2 3 4 5 6 7
    10진수: 0 1 2 3 4 5 6 7 8 9
    16진수: 0 1 2 3 4 5 6 7 8 9 A(10) B(11) C(12) D(13) E(14) F(15)




8가지 기본 자료형 [*암기]
    [정수]
        1. byte     1바이트    -128~127
        2. short    2바이트    +-3만정도
        3. int      4바이트    +-21억정도 [ *직접 입력한 값 -> 리터럴] - 정수의 기본타입.
        4. long     8바이트    +-21이상 [*리터럴 데이터 뒤에 l,L을 붙여 long타입 임을 알려야함]
                                                -정수 리터럴의 기본 타입은 int 이므로
        -기본 자료형으로 표현이 불가능한 범위는 문자열타입(클래스)사용
    [문자/정수]
        1.char  2바이트    0~65535, 유니코드, ' ' 작은따옴표 사용 , unsigned 사용

    [문자열/참조타입]
        1.String    문자 길이에 따름, 참조클래스, " "큰따옴표 사용, jdk13이상 """ """ 사용 가능
    [실수]
        1.float     4바이트    7자리 유효 [*리터럴 뒤에 F/f를 붙여서 사용함]
        2.double    8바이트    16자리 유효

    [이스케이프/제어문자]
    - \ 백슬래시 뜻함.
    "" : 문자열 형식을 위한 특수문자 / 기능이 들어감 -> 출력 불가능... ㅠㅠ
    '' : 문자 형식을 위한 특수문자 / 기능이 들어감 -> 출력불가능... ㅠㅠ

    -----> 출력하고 싶다...!! ----> \를 사용하자!!!

    - \" : "큰따옴표 문자형식 출력
    - \' : '작은 따옴표 문자형식 출력
    - \n : 줄바꿈 처리
    - \t : 탭 처리
    - \\ : \ 백슬래쉬 문자형식 출력
    - \r : 캐리지 리턴 [ 맨앞으로 커서 이동 ]

    ======================================제어문====================================
    if문 - if(조건식){실행코드;}
        단일 if 문
        if else 문
        if elseif else문
        이중 if 문
        중첩 if 문


    while문 - while(조건식) { 실행코드 }


    for문 - for(초기값 ; 조건 ; 증감){
        실행코드;
    }

    이중for문 - for문이 2개!!

        이중 for문 예제 (구구단)
            for( int i=2; i<=9;i++){
                for(int j=1;j<=9;j++){
                    System.out.println(i +"x" + j "=" + i*j);
                }
            }

=======================================================================================================================
객체 지향 프로그래밍
        - 객체들을 먼저 만들고 , 이 객체들을 하나씩 조립해서 와성된 프로그램을 만드는 기법
        - 객체 : 물리적으로 존재, 개념 중에서 다른 것과 식별 가능
        - 객체 구성
            -필드/속성 : 객체의 상태
            -메소드/함수/동작 : 객체의 행위
            사람                                  자동차
            이름, 나이 => 필드                      색깔, 속도 => 필드
            웃다, 먹다 => 메소드                    달린다,멈춘다 => 메소드



객체지향 프로그래밍의 특징
    1.캡슐화 : 객체내(필드/메소드)를 외부 객체로부터 접근제한(접근제한자 키워드)
    2.상속 : 객체가 다른 객체에게 물려주는 행위(상위/부모/슈퍼 객체 -> 하위/자식/서브 객체)
            -1. 코드의 재 사용성을 높인다. 2. 유지보수 최소화
    3.다형성: 사용방법(행위)등은 동일하지만 실행 결과는 다양하게 나오는 성질
            자동차 (객체)
                - 무료 타이어 객체 (펑크)                -> 한국타이어 10만원
                                                            한국타이어 객체 -> 전진 : 무료타이어보다 조금 더 부드럽다
                                                      -> 금호 타이어 20만원
                                                            금호타이어 객체 -> 전진 : 많이 부드럽다.


객체와 클래스!!
    인스턴스란 객체 지향 프로그래밍에서 클래스에 소속된 개별적인 객체를 말한다.

    -클래스 :(객체의 설계도) 객체를 생성하려면 설계도에 해당하는 클래스 필요
    -인스턴스 :(생성된객체) 클래스로부터 생성된 객체
    -인스턴스화 : (new) 클래스로부터 객체를 만드는 과정

- 클래스 선언
    접근제한자 클래스명
    1. 접근제한자 : 해당 클래스에 접근할수 있는 권한 키워드 public
    2. 클래스명 : 첫문자를 대문자인 카멜표기법

- 객체 생성
    클래스명 변수명 = new 생성자/클래스명(매개변수);

-클래스 용도
    1.라이브러리 클래스 : 일반적인 설계도 목적
    2.실행 클래스 : main()함수 가지는 프로그램 진입점

-클래스 구성멤버
    1.필드    : 객체의 데이터를 저장하는 공간. *단 변수와 비슷하지만 다르다.
    2.생성자  : 객체를 생성할때(new) 객체의 초기화 역할을 담당
    3.메소드  : 객체가 수행할 동작.
